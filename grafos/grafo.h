//
// Created by jose on 29/12/20.
//

#ifndef GRAFO_GRAFO_H
#define GRAFO_GRAFO_H
#define MAX 64
#include "casillero.h"

class grafo {
private :

    Casillero* arrayVertice[MAX];
     int  matrizAdyacencia[MAX][MAX];

     /* PRE: MATRIZ CREADA CORRECTAMENTE.
      POST: A CADA POSICION DE LA MATRIZ LE COLOCA EL VALOR 0
     */
    void iniciarMatriz(int mat[MAX][MAX]);
    /* PRE: VECTORES DE BOOL VISTO E INT DISTANCIA PERFECTAMENTE CREADOS.
       POST:RECORRE CADA UNA DE LAS POSICIONES DEL VECTOR VISTO Y DISTANCIA, DONDE ALMACENA EN UNA VARIABLE
       LA POSICION DEL MINIMO VALOR DEL VECTOR DISTANCIA QUE A SU VEZ SEA FALSE EN EL VECTOR VISTO Y RETORNA
       LA POSICION.
     */
    int minimoVectorNoVisto(bool visto[], int distancia[]);
    /* PRE : VECTOR BOOL VALIDO.
       POST: COLOCA  CADA POSICION DEL VECTOR EN FALSE.
     */
    void iniciarBool(bool array[]);

    /*PRE: VALORES DE ENTERO FILA Y COLUMNA VALIDOS.
    POST: RECORRE EL VECTOR DE VERTICES, SI ENCUENTRA QUE EL CASILLERO QUE ESTA ALMACENADO EN UNA POSICION DEL ARRAY
     TIENE LA MISMA FILA Y COLUMNA QUE LA PASADA POR PARAMETRO, DEVUELVE LA POSICION EN EL ARRAY VERTICE.
    */
    int buscarPosicion(int fila , int columna);
  /* PRE : VECTOR VEC CREADO CORRECTAMENTE
   POST : LE ASIGNA EL VALOR 0 A CADA UNA DE LAS POSICIONES DEL VECTOR.
   */
    void iniciarArray(int* vec);
    /*PRE : VECTOR INT vecDistancia VALIDO , VALOR INICIAL VALIDO , STRING PERSONAJE VALIDO
     POST : ITERA DESDE CERO A MAX, SI UN VERTICE NO ES ADYACENTE AL VALOR INICIAL LE COLOCA 6000 ,
     SI SON ADYACENTES LE COLOCA EL VALOR DEL PESO CORRESPONDIENTE AL ELEMENTO DEL PERSONAJE PASADO POR PARAMETRO.
     */
    void iniciarDistancia(int *vecDistancia , int inicial , string personaje);

public :
    /*PRE :
     POST: CREA UN GRAFO CON TODOS LOS VALORES DE LA MATRIZ DE ADYACENCIA 0.
     */
    grafo();

    /* PRE : PUNTERO A CASILLERO Y VARIABLE INT POSICION VALIDAS.
      POST: ALMACENA UN PUNTERO DE TIPO CASILLERO EN EL VECTOR DE VERTICES EN LA POSICION INDICADA POR PARAMETRO
     */
    void ingresarVertice(Casillero* casillero, int posicion);

    /* PRE : DOS PUNTEROS A CASILLEROS VALIDOS Y EXISTENTES EN ARRAY VERTICE Y UNA VARIABLE INT PESO VALIDA.
      POST: BUSCA LA POSICION EN EL ARRAY DE VERTICES DE LOS DOS PUNTEROS A CASILLEROS PASADOS POR PARAMETROS Y
      COLOCA EN LA MATRIZ DE ADYACENCIA EN LA POSICION INICIAL Y FINAL ENCONTRADAS EL VALOR DE LA VARIABLE PESO
      PASADA POR PARAMETRO.
     */
    void ingresarArista(Casillero* v1 , Casillero* v2 , int peso);

    /*PRE: DATO DE LA FILA Y COLUMNA DONDE SE ENCUENTRA UBICADO EL VERTICE DE PARTIDA Y LA FILA Y COLUMNA DEL VERTICE DE
     LLEGADA VALIDOS, ASI COMO EL TIPO DE PERSONAJE QUE VA A REALIZAR EL CAMINO MINIMO.

     POST: VA BUSCANDO SIEMPRE EL MINIMO VALOR NO VISTO HASTA QUE AL FINAL RETORNA EL CAMINO MINIMO DESDE LA
     POSICION INICIAL HASTA LA POSICION FINAL
     */
   int caminoMinimo( int filaInicial,int columnaInicial, int filaFinal, int columnaFinal,string personaje);

   /*PRE :
     POST: ELIMINA CADA UNO DE LOS PUNTEROS A CASILLERO QUE SE ENCUENTRAN EN EL ARRAY VERTICES.
    */
    ~grafo();

};


#endif //GRAFO_GRAFO_H
